# ##############################################################################
# The contents of this file are subject to the PyTis Public License Version    #
# 2.0 (the "License"); you may not use this file except in compliance with     #
# the License. You may obtain a copy of the License at                         #
#                                                                              #
#     http://www.PyTis.com/License/                                            #
#                                                                              #
#     Copyright (c) 2018 Josh Lee                                              #
#                                                                              #
# Software distributed under the License is distributed on an "AS IS" basis,   #
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License     #
# for the specific language governing rights and limitations under the         #
# License.                                                                     #
#                                                                              #
# @auto-generated by the PyTis Copyright Tool on 06:23 04 Apr, 2018            #
############################################################################## #
import os, sys

python_version = float("%s.%s"%(sys.version_info.major,sys.version_info.minor))

from lib import errors
from .settings import homedir, is_root, config_dir, config_file_path
import settings

__all__ = ['config_file_path', 'python_version', 'errors', 'mbool']

def add_os_touch():
  if not getattr(os,'touch',None):
    if sys.version_info >= (3, 3) and sys.version_info < (3,6):
      def touch(fname, *largs,**kwargs):
#        if os.path.isfile(fname) and os.path.exists(fname): return False
        open(fname, 'w+').close()
        return True

    elif sys.version_info >=(3, 3):
      def touch(fname, mode=0o666, dir_fd=None, **kwargs):
        if os.path.isfile(fname) and os.path.exists(fname):
          return False
        flags = os.O_CREAT | os.O_APPEND
        with os.fdopen(os.open(fname, flags=flags, mode=mode, dir_fd=dir_fd)) as f:
          os.utime(f.fileno() if os.utime in os.supports_fd else fname,
            dir_fd=None if os.supports_fd else dir_fd, **kwargs)
        return True

    else:
      def touch(fname, times=None):
#        if os.path.isfile(fname) and os.path.exists(fname): return False
        with file(fname, 'a'):
          os.utime(fname, times)
        return True
    os.touch = touch
add_os_touch()


def mbool(val=None):
  """
  Our config files are saved in INI format, thus values that would return as
  True such as str('1'), int(1), bool(True) are saved as strings, but so are
  str('0'), int(0), and bool(False).  Just because it exists as a string,
  doesn't mean it is True, even though that would be the case in pure Python.
  Therefore,... this function was written to convert a saved Boolean, back to a
  boolean.  Naming "mbool" for a shortend version of "my_boolean"
  Args: 
    val: ANYTHING (but probably a string as it was already saved in an INI then
         loaded back.
         Whatever value you passed into this, as loaded from an INI file.
  Returns:
    BOOLEAN - returns a boolean representation of the value passed in.

          Whatever the natural, built-in "bool" would return on the value,
          previous to being saved into the INI.
  """
  if not val:
    return False
  val = str(val).strip()
  if not val:
    return False
  if val.upper() in ['NONE', 'FALSE', '0']:
    return False
  return True

