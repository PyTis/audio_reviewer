#!/usr/bin/python3
# encoding=ISO-8859-1
# ##############################################################################
# The contents of this file are subject to the PyTis Public License Version    #
# 3.0 (the "License"); you may not use this file except in compliance with     #
# the License. You may obtain a copy of the License at                         #
#                                                                              #
#     http://www.PyTis.com/License/                                            #
#                                                                              #
#     Copyright Â© 2020 Josh Lee                                                #
#                                                                              #
# Software distributed under the License is distributed on an "AS IS" basis,   #
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License     #
# for the specific language governing rights and limitations under the         #
# License.                                                                     #
#                                                                              #
# @auto-generated by the PyTis Copyright Tool on 02:06 AM - 10 Dec, 2020       #
############################################################################## #
# =============================================================================
# Begin Imports
# -----------------------------------------------------------------------------
# builtin
try:
  import sys
except KeyboardInterrupt as e:
  print("KeyboardInterrupt: %s" % str(repr(e)))
  print("Script terminated by Control-C")
  print("bye!")
  exit(1)

# builtin
import os
import subprocess

# Internal

#
# Third-Party

# -----------------------------------------------------------------------------
# End Imports
# =============================================================================
# =============================================================================
# Begin VARIABLE DEFINITIONS
# -----------------------------------------------------------------------------
__author__ = 'Josh Lee'
__created__ = '01:52 AM - 08 Dec, 2020'
__copyright__ = 'PyTis'
__version__ = '1.0'

__all__ = ['SoundFile']

default_speed = 1.0

# XXX::TODO::GET`ER DONE!
# __version__ = 0.1 --> creation
# __version__ = 0.2 --> it works
# __version__ = 0.3 --> clean it up
# __version__ = 0.4 --> document what has been cleaned up
# __version__ = 0.5 --> document everything else
# __version__ = 0.6 --> test everything we can, try to break it with bad input
# __version__ = 0.7 --> apply bug fixes
# __version__ = 0.8 --> document bug fixes, apply spell checking and cleanup to
#                        documentation.
# __version__ = 0.9 --> run importnanny, and ensure it is properly copyrighted!
# __version__ = 0.9? -> ready for release, just needs packaged up 
# this is where confusion sets in, I still need to finish / complete jhelp, and
# learn how to auto-build man-pages from the --help options
# __version__ = 1.0 --> release with setup.py / installation files.

# -----------------------------------------------------------------------------
# End VARIABLE DEFINITIONS
# =============================================================================
# =============================================================================
# Begin Class Helpers
# -----------------------------------------------------------------------------

class SoundFile(object):
  history = []
  file_path = None
  _extension = None
  _md5 = None
  _file_name=None
  _name=None
  _folder=None
  _dirname=None
  _base_name=None
  current_state=None
  enum = 'store' # | rem_dir | review_dir | keep | other

# store | keep_dir | rem_dir | review_dir

  def __init__(self, fpath):
    self.clean(fpath)

  def clean(self, fpath=None):
    if not fpath: 
      fpath = self.file_path
    else:
      self.history.append(fpath)

    self._extension = None
    self._md5 = None
    self._file_name=None
    self._name=None
    self._dir_name=None
    self._dirname=None
    self._base_name=None
    self.current_state=None
    self.file_path = fpath
  reload=rebuild=clean


  def play(self, vlc_base, speed=default_speed):
    """

    store='/home/jlee/github/audio_reviewer/src/store'
    keep_dir = /home/jlee/github/audio_reviewer/src/store/to-keep
    rem_dir = /home/jlee/github/audio_reviewer/src/store/to-remove
    review_dir = /home/jlee/github/audio_reviewer/src/store/to-review
    vlc_base=file:///C:/cygwin64/home/jlee/github/audio_reviewer/src/

    """
    global default_speed
    vlc=os.path.abspath("/cygdrive/c/Program Files (x86)/VideoLAN/VLC/vlc.exe")
    vpath = os.path.join(vlc_base, self.file_path[1:])
    
#    PyTis.clearScreen()
#    print('vpath=', vpath)
#    PyTis.toContinue()
    try:
      float(speed)
    except:
      speed = default_speed
    else:
      if not speed:
        speed = default_speed

    if not speed:
      speed=1.0


    fire_command = "'%s' --rate=%s --playlist-enqueue '%s'" % (vlc,speed,vpath)
    self.current_state = 'playing'
    return subprocess.Popen(fire_command, shell=True, stdout=subprocess.PIPE)

  #@property
  #def enumer(self):
  #  return os.path.basename(os.path.dirname(self.fpath))

  @property
  def full_path(self):
    return self.file_path
  fpath=filepath=full_path

  @property
  def folder(self):
    if not self._folder:
      self._folder = os.path.basename(os.path.dirname(self.file_path))
    return self._folder
  enumer=folder

  @property
  def dirname(self):
    if not self._dirname:
      self._dirname = os.path.dirname(self.file_path)
    return self._dirname

  @property
  def name(self):
    if not self._name:
      self._name = os.path.basename(self.base_name).split('.')[0]
    return self._name
  
  @property
  def file_name(self):
    '''
    # basename with lowered file extension
    '''
    if not self._file_name:
      self._file_name = "%s.%s" % (self.name, self.extension.lower())
    return self._file_name

  @property
  def base_name(self):
    if not self._base_name:
      self._base_name = os.path.basename(self.file_path)
    return self._base_name

  @property
  def md5(self):
    if not self._md5:
      x = open(self.file_path,'rb')
      self._md5 = BUILD.md5_for_file(x)
      x.close()
    return self._md5

  @property
  def extension(self):
    if not self._extension and self._extension is None:
      try:
        self._extension = self.base_name.split('.')[-1]
      except IndexError:
        self._extension = ''
    return self._extension

  @property
  def ext(self):
    return ".%s" % self.extension
# -----------------------------------------------------------------------------
# End Class Helpers
# =============================================================================
# =============================================================================
# Begin HELPER Functions
# -----------------------------------------------------------------------------


def md5_for_file(f, block_size=2**20):
  md5 = hashlib.md5()
  while True:
    data = f.read(block_size)
    if not data:
      break
    md5.update(data)
  return md5.digest()
# -----------------------------------------------------------------------------
# End HELPER Functions
# =============================================================================
# =============================================================================
# Begin MAIN PROGRAM FUNCTIONS
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# End MAIN PROGRAM FUNCTIONS
# =============================================================================
# -----------------------------------------------------------------------------
# Begin MAIN 
# -----------------------------------------------------------------------------


def oldmain():
  """
SF = SoundFile
x = SF('/home/jlee/github/audio_reviewer/src/store/201205_0774.wma')
x.clean()
  """
  print(main.__doc__)
  return 0

def main():
  """

  Print out module documentation.

  """
  try:
    import pydoc
    pydoc.doc(os.path.basename(__file__).split('.')[0])
  except:
    print(__doc__)
    return 1
  else:
    return 0


# -----------------------------------------------------------------------------
# End MAIN 
# =============================================================================

if __name__ == '__main__':
  """

  Main function included to create documentation and for debugging.

  """

  try:
    sys.exit(main())
  except Exception as e:
    print("An error has occured.\n")
    print("="*80)
    type_,value_,traceback_ = sys.exc_info()
    print("ERROR REPORT:")
    print("Line: ", traceback_.tb_lineno)
    print("Type: ", type_)
    print("Argument(s): %s" % repr(e.args))
    print("Value(s): ", value_)
    print("Traceback follows:")
    print("-"*80)
    for tb_line in traceback.format_tb(traceback_):
      print(tb_line)
    print(str(e))
    print("="*80)
    sys.exit(1)

# =============================================================================
